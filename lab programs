      DATA STRUCTURES LAB
1.Write a program that uses functions to perform the following operations on singly linked list:
i)Creation   ii)Insertion   iii)Deletion   iv)Traversal
        
	#include<stdio.h>
#include<stdlib.h>
	

	struct node{
	    int data;
	    struct node*link;
	};
	struct node*head = NULL,*cur,*temp,*temp1;
	struct node*create(){
	    int n;
	    printf("Enter no. of nodes:");
	    scanf("%d",&n);
	    while(n--){
	            cur = (struct node*)malloc(sizeof(struct node));
	            scanf("%d",&(cur->data));
	            cur->link=NULL;
	            if(head==NULL){
	                head = cur;
	            }
	            else{
	                temp=head;
	                while(temp->link!=NULL){
	                    temp=temp->link;
	                }
	                temp->link=cur;
	            }
	    }
	    return head;
	 }
	

	 struct node*insert_begin(int ele){
	    cur = (struct node*)malloc(sizeof(struct node));
	    cur->data=ele;
	    cur->link=head;
	    head=cur;
	    return head;
	 }
	

	struct node*insert_end(int ele){
	    cur = (struct node*)malloc(sizeof(struct node));
	    cur->data=ele;
	    cur->link=NULL;
	    temp=head;
	    while(temp->link!=NULL){
	            temp=temp->link;
	    }
	    temp->link=cur;
	    return head;
	 }
	

	 struct node*insert_pos(int pos,int ele){
	    int c=1;
	    cur = (struct node*)malloc(sizeof(struct node));
	    cur->data=ele;
	    temp=head;
	    while(c<pos-1){
	            temp=temp->link;
	            c++;
	    }
	    cur->link=temp->link;
	    temp->link=cur;
	    return head;
	 }
	

	 struct node*delete_begin(struct node*head){
	    temp=head;
	    head=temp->link;
	    printf("deleted element %d",temp->data);
	    free(temp);
	    return head;
	 }
	

	 struct node*delete_end(struct node*head){
	    temp=head;
	    while(temp->link!=NULL){
	            temp1=temp;
	            temp=temp->link;
	    }
	    temp1->link=NULL;
	    printf("deleted element %d",temp->data);
	    free(temp);
	    return head;
	 }
	

	 struct node*delete_pos(struct node*head,int pos){
	    temp=head;
	    int c=1;
	    while(c<pos){
	            temp1=temp;
	            temp=temp->link;
	            c++;
	    }
	    temp1->link=temp->link;
	    printf("deleted element %d",temp->data);
	    free(temp);
	    return head;
	 }
	

	 void display(struct node*head){
	    temp = head;
	    while(temp != NULL){
	            printf(" %d ->",temp->data);
	            temp = temp->link;
	    }
	 }
	

	void reverse_display(struct node*head){
	    if(head!=NULL){
	            reverse_display(head->link);
	            printf("%d->",head->data);
	    }
	 }
	

	int search(struct node*head,int key){
	    int c=1;
	    temp=head;
	    while(temp!=NULL){
	            if(key==temp->data){
	                return c;
	            }
	            temp=temp->link;
	            c++;
	    }
	    return -1;
	 }
	

	struct node*sorting(struct node*head){
	    int x;
	    temp=head;
	    while(temp!=NULL){
	            temp1=temp->link;
	            while(temp1!=NULL){
	                    if(temp->data>temp1->data){
	                            x=temp->data;
	                            temp->data=temp1->data;
	                            temp1->data=x;
	                    }
	                    temp1=temp1->link;
	            }
	            temp=temp->link;
	    }
	    return head;
	 }
	

	int main(){
	    int ch,ele,pos,key;
	    while(1){
	        printf("\n1-create\n2-insert at begin\n3-insert at end\n4-insert at pos\n5-delete at begin\n6-delete at end\n7-delete at pos\n8-display\n9-reverse display\n10-search\n11-sort\n12-exit\n");
	        printf("\nEnter your choice : ");
	        scanf("%d",&ch);
	        switch(ch){
	            case 1 : head = create();
	                     break;
	            case 2 : scanf("%d",&ele);
	                     head = insert_begin(ele);
	                     break;
	            case 3 : scanf("%d",&ele);
	                     head = insert_end(ele);
	                     break;
	            case 4 : scanf("%d",&pos);
	                     scanf("%d",&ele);
	                     head = insert_pos(pos,ele);
	                     break;
	            case 5 : head = delete_begin(head);
	                     break;
	            case 6 : head = delete_end(head);
	                     break;
	            case 7 : scanf("%d",&pos);
	                     head = delete_pos(head,pos);
	                     break;
	            case 8 : display(head);
	                     break;
	            case 9 : reverse_display(head);
	                     break;
	            case 10 : scanf("%d",&key);
	                      pos = search(head,key);
	                      if(pos==-1){
	                            printf("element not found");
	                      }
	                      else{
	                        printf("element found at %d",pos);
	                      }
	                      break;
	            case 11 : head = sorting(head);
	                      break;
	            case 12 : exit(0);
	        }
	    }
	 }
	

	

	output:
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 1
	Enter no. of nodes:2
	3
	2
	

	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 8
	 3 -> 2 ->
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 2
	5
	

	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 8
	 5 -> 3 -> 2 ->
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 3
	1
	

	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 8
	 5 -> 3 -> 2 -> 1 ->
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 4
	3
	4
	

	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 8
	 5 -> 3 -> 4 -> 2 -> 1 ->
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 5
	deleted element 5
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 8
	 3 -> 4 -> 2 -> 1 ->
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 6
	deleted element 1
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 8
	 3 -> 4 -> 2 ->
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 7
	2
	deleted element 4
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 8
	 3 -> 2 ->
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 9
	2->3->
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 10
	2
	element found at 2
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 11
	

	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 8
	 2 -> 3 ->
	1-create
	2-insert at begin
	3-insert at end
	4-insert at pos
	5-delete at begin
	6-delete at end
	7-delete at pos
	8-display
	9-reverse display
	10-search
	11-sort
	12-exit
	

	Enter your choice : 12


2.Write a program that uses functions to perform the following operations on doubly linked list:
i)Creation  ii)Insertion  iii)Deletion  iv)Traversal
        
	#include<stdio.h>
#include<stdlib.h>
	struct node{
	    int data,ele,pos;
	    struct node*prev;
	    struct node*next;
	};
	struct node *head = NULL, *tail = NULL, *cur, *temp, *temp1;
	struct node *create(){
	    int n;
	    printf("Enter no of nodes :");
	    scanf("%d",&n);
	    while(n--){
	        cur = (struct node*)malloc(sizeof(struct node));
	        scanf("%d",&(cur->data));
	        cur->prev = NULL;
	        cur->next = NULL;
	    if (head == NULL){
	         head = cur;
	    }
	    else{
	        temp = head;
	        while(temp->next!=NULL)
	            temp = temp->next;
	        tail=temp->next = cur;
	        cur->prev =temp;
	    }
	    }
	    return head;
	}
	struct node *insert_begin(int ele){
	    cur = (struct node*)malloc(sizeof(struct node));
	    cur->data = ele;
	    cur->next = head;
	    head->prev = cur;
	    cur->prev = NULL;
	    head = cur;
	    return head;
	}
	struct node *insert_end(int ele){
	    cur = (struct node*)malloc(sizeof(struct node));
	    cur->data = ele;
	    cur->next = NULL;
	    tail->next = cur;
	    cur->prev = tail;
	    tail = cur;
	    return head;
	}
	struct node *insert_pos(int pos,int ele){
	    int c=1;
	    cur = (struct node*)malloc(sizeof(struct node));
	    cur->data = ele;
	    temp = head;
	    while(c<pos){
	        temp1 = temp;
	        temp = temp->next;
	        c++;
	    }
	    temp1->next = cur;
	    cur ->prev = temp1;
	    cur->next = temp;
	    temp->prev = cur;
	    return head;
	}
	struct node *delete_begin(struct node *head){
	    temp = head;
	    head = temp->next;
	    temp->prev = NULL;
	    printf("deleted element %d",temp->data);
	    free(temp);
	    return head;
	}
	struct node *delete_end(struct node *tail){
	    temp = tail;
	    tail = tail->prev;
	    tail->next = NULL;
	    printf("deleted element %d",temp->data);
	    free(temp);
	    return tail;
	}
	struct node *delete_pos(struct node *head,int pos){
	    int c = 1;
	    temp = head;
	    while(c<pos){
	        temp1 = temp;
	        temp = temp->next;
	        c++;
	    }
	    temp1->next = temp->next;
	    temp->next->prev = temp1;
	    printf("deleted element %d",temp->data);
	    free(temp);
	    return head;
	    }
	void display(struct node* head){
	    temp = head;
	    while(temp != NULL){
	        printf("%d->",temp->data);
	        temp = temp->next;
	    }
	}
	

	int main(){
	    int ch,ele,pos,key;
	    while(1){
	        printf("\n 1-create\n 2-insert at begin\n 3-insert at end\n 4-insert at pos\n 5-delete at begin\n 6-delete at end\n 7-delete at pos\n 8-display\n 9-exit\n");
	        printf("\nEnter your choice : ");
	        scanf("%d",&ch);
	        switch(ch){
	            case 1 : head = create();
	                     break;
	            case 2 : scanf("%d",&ele);
	                     head = insert_begin(ele);
	                     break;
	            case 3 : scanf("%d",&ele);
	                     head = insert_end(ele);
	                     break;
	            case 4 : scanf("%d",&pos);
	                     scanf("%d",&ele);
	                     head = insert_pos(pos,ele);
	                     break;
	            case 5 : head = delete_begin(head);
	                     break;
	            case 6 : tail = delete_end(tail);
	                     break;
	            case 7 : scanf("%d",&pos);
	                     head = delete_pos(head,pos);
	                     break;
	            case 8 : display(head);
	                     break;
	            case 9 : exit(0);
	        }
	    }
	}
	

	Output:
	1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 1
	Enter no of nodes :2
	5
	7
	

	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 8
	5->7->
	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 2
	3
	

	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 8
	3->5->7->
	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 3
	9
	

	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 8
	3->5->7->9->
	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 4
	2
	1
	

	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 8
	3->1->5->7->9->
	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 5
	deleted element 3
	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 8
	1->5->7->9->
	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 6
	deleted element 9
	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 8
	1->5->7->
	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 7
	2
	deleted element 5
	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 8
	1->7->
	 1-create
	 2-insert at begin
	 3-insert at end
	 4-insert at pos
	 5-delete at begin
	 6-delete at end
	 7-delete at pos
	 8-display
	 9-exit
	

	Enter your choice : 9
	

	Process returned 0 (0x0)   execution time : 122.283 s
	Press any key to continue.


3.Write  a program that implement stack(its operations) using 
i)Arrays  ii)Pointers
i)Arrays
  
	#include<stdio.h>
#include<stdlib.h>
	#define SIZE 5
	int i,ele,top = -1,stack[SIZE];
	void push(int ele){
	     stack[++top] = ele;
	}
	int pop(){
	    return(stack[top--]);
	}
	int peek(){
	    return(stack[top]);
	}
	void display(){
	     for(i = top; i >= 0; i--){
	         printf("%d\n",stack[i]);
	     }
	}
	int main(){
	    int ch;
	    while(1){
	          printf("\n1-push\n2-pop\n3-peek\n4-display\n5-exit");
	          printf("\nEnter your choice : ");
	          scanf("%d",&ch);
	          switch(ch){
	                case 1 : if(top == SIZE - 1){
	                                  printf("stack overflow");
	                        }
	                        else{
	                            printf("Enter element to be inserted : ");
	                            scanf("%d",&ele);
	                            push(ele);
	                       }
	                       break;
	                case 2 : if(top == -1){
	                                 printf("stack underflow");
	                         }
	                         else{
	                             printf("deleted element is %d",pop());
	                         }
	                         break;
	                case 3 : if(top == -1){
	                                 printf("stack underflow");
	                         }
	                         else{
	                             printf("top element is %d",peek());
	                         }
	                         break;
	                case 4 : if(top == -1){
	                                 printf("stack underflow");
	                         }
	                         else{
	                              display();
	                         }
	                         break;
	                case 5 : exit(0);
	

	            }
	    }
	}
	

	Output:
	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 1
	Enter element to be inserted : 6
	

	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 1
	Enter element to be inserted : 2
	

	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 1
	Enter element to be inserted : 3
	

	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 4
	3
	2
	6
	

	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 2
	deleted element is 3
	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 4
	2
	6
	

	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 3
	top element is 2
	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 5
ii)Pointers
        
	#include<stdio.h>
#include<stdlib.h>
	struct node{
	       int data;
	       struct node*link;
	};
	struct node*top = NULL, *cur, *temp;
	void push(int ele){
	     cur = (struct node*)malloc(sizeof(struct node));
	     cur->data = ele;
	     if(top == NULL){
	             cur->link = NULL;
	     }
	     else{
	         cur->link = top;
	     }
	     top = cur;
	}
	int pop(){
	    temp = top;
	    if(top == NULL){
	            printf("stack underflow");
	    }
	    else{
	        top = top->link;
	        return(temp->data);
	        free(temp);
	    }
	}
	int peek(){
	    return(top->data);
	}
	void display(){
	     temp = top;
	     while(temp != NULL){
	                 printf("%d\n", temp->data);
	                 temp = temp->link;
	     }
	}
	int main(){
	    int ch,ele;
	    while(1){
	         printf("\n1-push\n2-pop\n3-peek\n4-display\n5-exit");
	         printf("\nEnter your choice : ");
	         scanf("%d", &ch);
	         switch(ch){
	                case 1 : printf("Enter element : ");
	                         scanf("%d", &ele);
	                         push(ele);
	                         break;
	                case 2 : printf("Deleted element id %d",pop());
	                         break;
	                case 3 : if(top == NULL){
	                                 printf("stack underflow");
	                         }
	                         else{
	                             printf("top most ele is %d",peek());
	                         }
	                         break;
	               case 4 : if(top == NULL){
	                                 printf("stack underflow");
	                        }
	                        else{
	                            display();
	                        }
	                        break;
	               case 5 : exit(0);
	        }
	    }
	}
	

	Output:
	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 1
	Enter element : 1
	

	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 1
	Enter element : 4
	

	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 1
	Enter element : 3
	

	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 4
	3
	4
	1
	

	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 2
	Deleted element id 3
	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 4
	4
	1
	

	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 3
	top most ele is 4
	1-push
	2-pop
	3-peek
	4-display
	5-exit
	Enter your choice : 5
4.Write a program that implement Queue(its operations) using 
i)Arrays  ii)Pointers
i)Arrays 
#include<stdio.h>
#include<stdlib.h>
#define SIZE 5
int front = -1,rear = -1,a[SIZE];
void enqueue(int ele){
    a[++rear] = ele;
    if(front == -1)
        front = 0;
}
int dequeue(){
    if(front == rear){
        return a[front];
        front = rear = -1;
    }
    else{
        return a[front++];
    }
}
void display(){
    for(int i=front;i<=rear;i++){
        printf("%d\n",a[i]);
    }
}

int main(){
    int ch,ele;
    while(1){
        printf("\n 1-enqueue \n 2-dequeue \n 3-display \n 4-exit \n");
        printf("Enter your choice :");
        scanf("%d",&ch);
        switch(ch){
            case 1 : if(rear == SIZE - 1)
                        printf("Queue overflow");
                     else{
                        printf("Enter element to be inserted :");
                        scanf("%d",&ele);
                        enqueue(ele);
                     }
                     break;
            case 2 : if(front == -1)
                        printf("Queue underflow");
                     else
                        printf("deleted element is %d",  dequeue());
                     break;
            case 3 : if(front == -1)
                        printf("Queue empty");
                     else
                        display();
                     break;
            case 4 : exit(0);

       }
    }
}
Output:
 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :1
Enter element to be inserted :5

 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :1
Enter element to be inserted :7

 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :3
5
7

 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :2
deleted element is 5
 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :3
7

 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :4

Process returned 0 (0x0)   execution time : 31.903 s
Press any key to continue.

ii)Pointers
#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node*link;
};
struct node*front = NULL,*rear = NULL,*cur;
void enqueue(int ele){
    cur = (struct node*)malloc(sizeof(struct node));
    cur->data = ele;
    cur->link = NULL;
    if(front==NULL){
        front = rear = cur;
    }
    else{
        rear->link = cur;
        rear = cur;
    }

}
void dequeue(){
    if(front == NULL){
        printf("Queue underflow");
    }
    else if(front == rear){
        printf("deleted element is %d",front->data);
        front = rear = NULL;
    }
    else{
        printf("deleted element is %d",front->data);
        front=front->link;
    }
}
void display(){
    if(front == NULL){
        printf("Queue is empty");
    }
    else{
        cur = front;
        while(cur!=NULL){
            printf("%d\n",cur->data);
            cur = cur->link;
        }
    }
}

int main(){
    int ch,ele;
    while(1){
        printf("\n 1-enqueue \n 2-dequeue \n 3-display \n 4-exit \n");
        printf("Enter your choice :");
        scanf("%d",&ch);
        switch(ch){
            case 1 : printf("Enter element to be inserted :");
                     scanf("%d",&ele);
                     enqueue(ele);
                     break;
            case 2 :
                     dequeue();
                     break;
            case 3 : display();
                     break;
            case 4 : exit(0);

       }
    }
}
Output:
 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :1
Enter element to be inserted :1

 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :1
Enter element to be inserted :3

 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :3
1
3

 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :2
deleted element is 1
 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :3
3

 1-enqueue
 2-dequeue
 3-display
 4-exit
Enter your choice :4

Process returned 0 (0x0)   execution time : 19.213 s
Press any key to continue.

5.Write a program that use both recursive  and non recursive functions to perform the following searching operations for a Key value in a given list of integers:
i)Linear Search    ii)Binary Search
i)Linear Search
Using Recursion
  
 	include<stdio.h>
int linearSearch1(int[] ,int , int);
	int main(){
	        int a[30],n,i,x,p;
	        printf("Enter size of list:");
	        scanf("%d" , &n);
	        printf("Elements of array:");
	        for(i=0;i<n;i++){
	                scanf("%d" ,&a[i]);
	        }
	        printf("Element to be searched:");
	        scanf("%d",&x);
	        p = linearSearch1(a,n,x);
	        if(p == -1){
	             printf("Element not found");
	        }
	        else{
	             printf("Element found at position %d :",p);
	        }
	}
	int i=0;
	int linearSearch1(int a[],int n,int x){
	        if(a[i]==x){
	                return i;
	        }
	        if(i<n){
	                i++;
	                linearSearch1(a,n,x);
	        }
	        if(i>=n){
	                return -1;
	        }
	}
	

	Input:
	Enter size of list:3
	Elements of array:1
	2
	3
	Element to be searched:3
	Output:
	Element found at position 2
	

	Input:
	Enter size of list:3
	Elements of array:1
	2
	3
	Element to be searched:4
	Output:
	Element not found

Using Non Recursion 
 
	include<stdio.h>
int linearSearch(int[] ,int , int);
	int main(){
	        int a[30],n,i,x,p;
	        printf("Enter size of list:");
	        scanf("%d", &n);
	        printf("Elements of array:");
	        for(i=0;i<n;i++){
	                scanf("%d" ,&a[i]);
	        }
	        printf("Element to be searched:");
	        scanf("%d",&x);
	        p = linearSearch(a,n,x);
	        if(p == -1){
	             printf("Element not found");
	        }
	        else{
	             printf("Element found at position %d :",p);
	       }
	}
	int linearSearch(int a[],int n,int x){
	        int i;
	        for(i=0;i<n;i++){
	                if(x == a[i]){
	                        return i;
	                }
	        }
	        return -1;
	}
	

	Input:
	Enter size of list:3
	Elements of array:2
	3
	1
	Element to be searched:3
	Output:
	Element found at position 1
	

	Input:
	Enter size of list:2
	Elements of array:1
	2
	Element to be searched:3
	Output:
	Element not found

ii)Binary Search
Using Recursion
 
	include<stdio.h>
int binarySearch1(int[],int,int,int);
	int main(){
	        int a[30],n,i,x,p;
	        int low,high;
	        printf("Enter size of list:");
	        scanf("%d",&n);
	        printf("Enter %d elements:",n);
	        for (i=0;i<n;i++){
	                 scanf("%d",&a[i]);
	        }
	        low=0;
	        high=n-1;
	        printf("Element to be searched:");
	        scanf("%d",&x);
	        p = binarySearch1(a,x,low,high);
	        if(p == -1){
	                printf("Element not found");
	        }
	        else{
	                printf("Element found at %d position ",p);
	        }
	}
	int binarySearch1(int a[],int x,int low,int high){
	        int mid;
	        if(low>high)
	                return -1;
	        mid=(low+high)/2;
	        if(x==a[mid])
	                return mid;
	        else if(x<a[mid])
	                binarySearch1(a,x,low,mid-1);
	        Else
	                binarySearch1(a,x,mid+1,high);
	        return -1;
	}
	

	Input:
	Enter size of list:3
	Enter 3 elements:2
	3
	4
	Element to be searched:3
	Output:
	Element found at 1 position
	

	Input:
	Enter size of list:2
	Enter 2 elements:1
	2
	Element to be searched:3
	Output:
	Element not found

Using Non Recursion
 
	include<stdio.h>
int binarySearch(int[],int,int);
	int main(){
	        int a[30],n,i,x,p;
	        printf("Enter size of list:");
	        scanf("%d",&n);
	        printf("Enter %d elements:",n);
	        for (i=0;i<n;i++){
	                 scanf("%d",&a[i]);
	        }
	        printf("Element to be searched:");
	        scanf("%d",&x);
	        p =binarySearch(a,n,x);
	        if(p == -1){
	             printf("Element not found");
	        }
	        else{
	            printf("Element found at %d position ",p);
	        }
	}
	int binarySearch(int a[],int n,int x){
	        int beg=0,end=n-1,mid;
	        while(beg<=end){
	                mid=(beg+end)/2;
	                if(x<a[mid])
	                        end = mid-1;
	                else if(x>a[mid])
	                        beg = mid+1;
	                Else
	                        return mid;
	        }
	        return -1;
	}
	

	Input:
	Enter size of list:3
	Enter 3 elements:1
	2
	3
	Element to be searched:2
	Output:
	Element found at 1 position
	

	Input:
	Enter size of list:2
	Enter 2 elements:2
	3
	Element to be searched:4
	Output:
	Element not found



