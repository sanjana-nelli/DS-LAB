#include<stdio.h>
#include<stdlib.h>
   struct node
    {  
       int data;
        struct node*left;
        struct node*right;
    };
    struct node*root=NULL,*cur,*temp;
    struct node*create()
    {
        cur=(struct node*)malloc(sizeof(struct node));
        scanf("%d",&(cur->data));
        cur->left=NULL;
        cur->right=NULL;
    if(root ==NULL)
        root=cur;
    else
    {
        temp =root;
      while(temp!=NULL)
      {
        if(cur->data < temp->data && temp->left == NULL)
        {
            temp->left=cur;
            return root;
        }
        else if(cur->data < temp->data && temp->left !=NULL)
              temp=temp->left;
      else if(cur->data >= temp->data && temp->right==NULL)
            {
                temp->right = cur;
               return root;
            }
        else if(cur->data >=temp->data && temp->right!=NULL)
             {
temp=temp->right;
                                                                                                                            1,1           Top

 }
        }
    }
    }
    void preorder(struct node*root)
    {
        if(root !=NULL)
            {
                printf("%d\n",root->data);
                preorder(root->left);
                preorder(root->right);
            }
    }
    void inorder(struct node*root)
    {
        if(root!=NULL)
            {
                inorder(root->left);
                printf("%d\n",root->data);
                inorder(root->right);
            }
    }
void postorder(struct node*root)
   {
      if(root!=NULL)
            {
                postorder(root->left);
                postorder(root->right);
                printf("%d\n",root->data);
          }
}
int main()
    {
      int ch,ele;
      while(1)
        {
            printf("1.create\n 2.preorder\n 3.inorder\n 4.postorder\n 5.exit\n");
            printf("enter your choice\n");
            scanf("%d",&ch);
            switch(ch)
              {
                    case 1: root=create();
                            break;
                    case 2: preorder(root);
                            break;
                    case 3: inorder(root);
                            break;
                    case 4: postorder(root);
                            break;
                    case 5: exit(0);
              }
      }
  }
  //output//
  1.create
 2.preorder
 3.inorder
 4.postorder
 5.exit
enter your choice
1
6
1.create
 2.preorder
 3.inorder
 4.postorder
 5.exit
enter your choice
1
7
1.create
 2.preorder
 3.inorder
 4.postorder
 5.exit
enter your choice
1
5
1.create
 2.preorder
 3.inorder
 4.postorder
 5.exit
enter your choice
2
6
5
7
1.create
 2.preorder
 3.inorder
 4.postorder
 5.exit
enter your choice
3
5
6
7
1.create
 2.preorder
 3.inorder
 4.postorder
 5.exit
enter your choice
4
5
7
6
1.create
 2.preorder
 3.inorder
 4.postorder
 5.exit
enter your choice
5


  
